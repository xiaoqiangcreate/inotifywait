# 指定了socket file的位置
[unix_http_server]
file=/tmp/supervisor.sock

 # 管理服务本身的配置
[supervisord]
logfile=/tmp/supervisord.log
#logfile_maxbytes=50MB          #日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小
#logfile_backups=10             #日志文件保留备份数量默认10，设为0表示不备份
#loglevel=info                  #日志级别，默认info，其它: debug,warn,trace
pidfile=/tmp/supervisord.pid
#nodaemon=false                 #是否在前台启动，默认是false，即以 daemon 的方式启动
#minfds=1024                    #可以打开的文件描述符的最小值，默认 1024
#minprocs=200                   #可以打开的进程数的最小值，默认 200

[program:real_time_bak]
# 启动命令，与手动在命令行启动的命令是一样的
command= sh real_time_bak.sh
# 程序的启动目录
directory=/opt/sh/
# 可以通过 environment 来添加需要的环境变量，一种常见的用法是使用指定的 virtualenv 环境
#environment=DJANGO_SETTINGS_MODULE=settings.test
# 指定用户名
user=root
# 日志目录 需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）
stdout_logfile=/opt/sh/logs/bak.stdout.log
stderr_logfile=/opt/sh/logs/bak.stderr.log
# 日志备份数量
stdout_logfile_backups = 20
# 指定日志文件大小
stdout_logfile_maxbytes = 20MB
# 把 stderr 重定向到 stdout，默认 false,错误日志也会写进stdout_logfile中
#redirect_stderr=True
# 在 supervisord 启动的时候也自动启动
autostart=True
# 程序异常退出后自动重启
autorestart=True
